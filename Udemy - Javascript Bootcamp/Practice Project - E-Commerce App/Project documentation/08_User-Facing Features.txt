This document contains more details about user-facing features of the "Practice Project - E-Commerce App"
---------------------------------------------------------------------------------------------------------------
>>>>> USER-FACING FEATURES

In this project, the user should have the ability to perform the following actions:
- see a list of products
- click to add a product to the cart
- click to see a summary of all the products that are currently in the shopping cart
- remove a product from the shopping cart
- click to buy the products

NOTE: the buy action in this project will only show a success message and clear the cart

Handlers that we are going to need:
- list all different products
- add item to cart
- display shopping cart
- remove product from cart
- buy items in the cart

---------------------------------------------------------------------------------------------------------------

>>>> REUSABLE LAYOUT

Same as we currently have for the admin related features, the HTML generation will be placed into some different files that are going to be placed inside of the Views directory. The idea is to have a bunch of different files inside of this new directory, each one being responsible for returning one little snippet of HTML.

These snippets will be added to the body of a reusable layout, that will contain all the HTML that can be shared across all user-facing pages of the application.

Note that this layout will have some content that is not really useful, such as the header with the phone number and social media icons, and the promo banner. They are only being added to give to whoever sees this project a sense of visiting an e-commerce page.


---------------------------------------------------------------------------------------------------------------

>>>> PRODUCTS LISTING

Displaying the list of products:
- It will be handled as a GET request to '/'
- It will be the central page of the project (landing page)
- Display a list of the existing products, each entry containing product's name, price, image and a "add to cart" button.
- Display a Cart button 

To display list of products:
- use getAll method to get a list of all the products in the products repository
- create a view that will list out all those different products (index)
- get this view to be displayed when a GET request is made to '/'

Clicking the Add to Cart button for a given product will add that product to the cart. Each product can be added multiple times, and that's accounted for in the cart total. Clicking the Cart will allow user to the the cart summary.

---------------------------------------------------------------------------------------------------------------

>>>> SHOPPING CART

In this aplication, an user should be able to add a product to the cart by clicking the "add to cart" button related to that given product. One thing about this application is that the user doesn't need to be autheticated in order to visit the products list and andd some of them to a cart (authentication covers only the admin panel side of this application). That being said, we need to figure out:

- How do we tie a cart to a person who will never be logged in?

This is going to use a similar logic to the one that was implemented for user authentication. When a person clicks to add a product to the cart, a POST request will be made to our server. This request will contain the id of the item that the user wants to add. To take that product and associate with the user making the request, we're going generate some kind of representation of a shopping cart, assign it a random id, set that cart id inside the session cookie, and send the response to the person who made the request. Because we're string this cart id inside the cookie, every single thime this person with this browser makes a follow-up request to our application, we're always going to know exactly what cart is tied to that person - we are going to look in the cookie and see the cart id there.

- Even if we can identify who's trying to add an item to a cart, how do we tie the product to a cart?

We are going to create a Carts Repository. Whenever an user attempts to add a product to a cart, if they don't have a cart already, we are going to generate one for them, which means we're going to essentially create a new record in the Carts Repository that's going to have a randomly assinged id and a products array. In this products array, we're going to store the id of the product as a reference that will point over to the products repository.

-----

>> SHOPPING CART BOILERPLATE

- Create a Carts Repository that will extend from the Repository Class
- Create a file that will export an instance of a router object containing all the route handlers associated with the shopping cart
- Make sure to require in this router and associate it with our express app, in the root index.js file

-----

>> ROUTE HANDLERS

1. ADD TO CART
- clicking the 'add to cart' button will trigger a form submission
- handled as a POST request to '/cart/products'
- will take whatever item the user just clicked on and add it to a shopping cart

NOTE: each product card has a form in its footer, containing a hidden input with the product in the value property, and a 'add to cart' button that submits this form with a method of POST to "/cart/products". We can have access to the product id in the body of the POST request, so we know which product is being added to the shopping cart.

Scenarios to account for:
- check if user already has a cart -> if no, create one / if yes, retrieve the cart information from repository
- check if an isntance of the item already exists in the cart -> if no, add one / if yes, increment quantity

2. DISPLAY CART
- clicking the 'cart' button will redirect user to a list of products in the cart
- handled as a GET request to '/cart'
- each product will have and option to 'remove from cart'
- at the bottom of the list of products, display cart total price

NOTE: in the course scope, the solution implemented when the user didn't have a cart was to redirect to the root index page when the user clicks the cart button. Since this was not a behaviour I was happy with, I decided to make it display an empty cart (we would need that eventually, if user gets to the point of removing all items from the cart. In order to do that, we'd need to repeat the check that was made for the 'add product' logic: check if user already has a cart -> if no, create one / if yes, retrieve the cart information from repository. It would be a duplicated block of code, so I created a function in the carts repository to encapsulate that behaviour.

Scenarios to account for:
- if card is empty, show a message saying that the cart is empty where the list of items should be.
- if there are items, display the list accordingly.

3. REMOVE FROM CART
- clicking the 'remove from cart' button for a given product will trigger a form submission
- handled as a POST request to to '/cart/products/remove'
- will take whatever item the user just clicked on and remove it from the shopping cart
- after the product deletion, redirect back to display an updated cart

