>>>> USER SIGNUP

Displaying the sign in form:
- It will be handled as a GET request to /signup.
- Display a form where user can submit email, password and psswordConfirmation.

Signing up:
- It will be handled as a POST request to /signup
- When a sign up form is submitted -> validate data -> create a new user

Signup validation logic will be implemented as following:

1. If another user already signed up with this email, show an error.
Only one unique email will be allowed for each user.

2. If password and password confirmation are different, show an error.
Password confirmation must match the password.

If no errors are encountered, create an account for the user.

3. After the account is created, redirect to the login page.

----------------------------------------------------------------------------------------------------------------

>>>> COOKIE BASED AUTHENTICATION

The whole idea of signing up and signing into an application revolves around a server being able to identify who is making requests to it. There are technically several ways to handle authentication inside of a web application, but the vast majority of authentication work with cookies.

When the browser makes a request to the server, the server can optionally decide to include a cookie inside of the request. A cookie is a small string of characters that the server wants the browser to store and inlcude with every follow up request that is ever made to any server at the particular domain. When the browser then makes a request to that same domain, the browser is going to automatically include that small string of characters with the request that is being issued. And this cookie is the absolute core of the vast majority of authentication. It is what allows an application to identify users who are coming to it and making a series of requests.

When someone signs into the application, the server is going to compare the email and password that is being provided. If the email and password match an user account that is stored in the database, the server is then going to send a cookie down to the browser that contains in a very encrypted format some identifying token about the user who just signed in. Then, whenever the browser makes a follow up request to the server, it's going to include that cookie that has that little identifying piece of information inside of it. So the server can read that piece of information, see that the request is being made by a given user that holds that as an identifier, and then look up inside their data store and find the user that matches that identifying piece.

In this application, whenever an user is created in the Users Repository, we are going to store the id of that user inside of the user's cookie. Any time we receive a follow up request, we are going to look into the cookie, take the id that is inside of it and use that to identify the person who is making the request.

>> MANAGING THE COOKIE

Managing cookies in notoriously tricky. They are very complicated and easy to get wrong. We can very easily put in a mistake that exposes a lot of information about he users to malicious people. So, rather than takig all that liability on ourselves, we are going to instead use somebody else's library and have it do everything for us.

cookie-session is a simple cookie-based session middleware.
https://www.npmjs.com/package/cookie-session

method: cookieSession(options)
Creates a new cookie session middleware with the provided options. This middleware will attach the property session to req, which provides an object representing the loaded session. This session is either a new session if no valid session was provided in the request, or a loaded session from the request. The middleware will automatically add a Set-Cookie header to the response if the contents of req.session were altered.

In our application, we'll use cookieSession to create a new cookie session middleware with the provided keys option, and app.use will set this middleware to be called for all the different route handlers.

The option keys represents the list of keys to use to sign & verify cookie values. We are going to pass in a string of random characters that will be used to encrypt all the information that is stored inside the cookie, so we can protect the content of the cookie from being easily altered.

What cookieSession really does is add in an additional property session to the req object. The req.session is going to be an object to which we can add in as many properties as we wish. If we ever add in any properties to this object, whenever we call res.send the cookie session library is going to automatically look at the object and take a look at that information we added, take that information, code it into a simple string, and then attach it to the outgoing response as the cookie that should be stored on the user's browser. So if we want to store the ID of the user inside of the user's cookie, we are going to just add a new property to the req.session object.

----------------------------------------------------------------------------------------------------------------

>>>> USER SIGN OUT

When a user logs out of the application:
- It will be handled as a GET request to /signout.
- Need to take whatever the current session object is and 'forget' it, by setting req.session to null.
- Display the Sign In form, so the user can access the application by logging back in.

----------------------------------------------------------------------------------------------------------------

>>>> USER SIGN IN

Displaying the sign in form:
- It will be handled as a GET request to /signin.
- Display a form where user can submit email and password.

Signing in:
- It will be handled as a POST request to /signin
- When a sign in form is submitted -> validate data -> authenticate user

Signin validation logic will be implemented as following:

1. If there's no account associated to the provided email, show an error.
There must be an existing account for the email before trying to sign in using that email.

2. If password provided in the form does not match the one saved in the user's record, show an error.
Password provided in form must match the password in the database for the user with the provided email.

If no errors are encountered, authenticate the user.

3. When the user is finally authenticated, it must be redirected to the products index page, which is the central page of the admin panel.

----------------------------------------------------------------------------------------------------------------

>>>> PASSWORD SECURITY

Currently, passwords are being stored as a plain text string -> big security issue!

>> Hashing algorithms

There are many hashing algorithms implemented in a variety of differetn computer programming languages. The goal of a hashing algorithm is to take a string and, based upon the characters inside of that string, spit out a random series of characters.

Notes:
 - if we ever put in the same string to the hashing algorithm twice, we are always going to get the same output back.
 - making even a tiny change to the original string will result in the hash output being significantly different.
 - hashing algorithms do not work in reverse, so there's no way to get the original string out of the hash output.

Implementing hashing algorithm to securely store a password would involve the following steps:

1. When user signs up, the password provided in the sign up form will not be stored at all. We are going to store the hashed output of the provided password instead.

2. When user tries to sign in, the password provided in the sign in form will be first ran through the same hashing algorithm, and the hashed output will be compared with the one stored in the database. Since we always get the same hashed output when passing the exact same string to the hashing algorithm, we can be sure, that if the hashes match, it means that the user is trying to sign in submitting a string in the password input that is the exact same string that was stored during the sign up process.

>> WARNING! The hashing process alone still leaves us with a security hole!

There are some passwords that are frequently used by lots of different users.

Rainbow table attack: when a malicious user gets a list of all those very commonly used passwords and the respective hash for each one of these passwords. If this malicious user gets access to the passwords stored inside of our users.json file in a hashed format, then they could run a simple check to see if there is a corresponding hash stored inside of their list.

To prevent our application to be vulnerable to this type of attack, we are going to add an extra layer of security before storing the user's password in our users.json file.

>> Salting passwords

We are going to append a random string of characters to every password before we hash them called a salt. Every time an user signs up to the application, we are going to give every different user a very different salt. We are going to concatenate the password provided with this random string of characters, and then pass the whole thing to the hashing algorithm.

By adding this salt to the password, we won't be able to just use the step 2 of the hashing algorithm implmentation as mentioned above. So this is what we'd need to do to implement both layers of security (salting + hashing) to our password storage and verification:

1. When user signs up, the password provided in the sign up form will be concatenated with a randomly generated string of characters. We are going to store the hashed output of the whole string generated from this concatenation, followed by a separator and the salt string that was generated for that user.

2. When user tries to sign in, we are going to get the salt from the string that was saved in the data store (whatever comes after the separator in the string that was saved in the password for that user) and append it to the string provided by the user in the sign in form. Then we are going to run the whole string generated from this concatenation through the same hashing algorithm, and the hashed output will be compared with the one stored in the database (whatever comes before the separator in the string that was saved in the password for that user). If the hashes match, it means that the user is trying to sign in submitting the correct password.

>> Implementing Salting + Hashing Passwords

Where to add code to handle these security steps?
- Best place would be the UsersRepository class. We can add logic to add the salt and run the whole generated string through the hash algorithm when creating a new user. And create a separate method to check to validate the password that the user provides when trying to sign in.

How are we going to generate the salt?
- Using the crypto.randomBytes method, from the crypto module of the node.js standard library (that same method we used to generate the user id).

How are we going to do the hashing process?
- Using the crypto.scrypt method, from the crypto module of the node.js standard library. This function is named after a very specific password hashing algorithm scheme. It receives the following arguments:
  - the plain text password that we are trying to turn into a hash;
  - the salt;
  - the key length;
  - an options object (we are going to use the default values for all of the options);
  - callback function to be invoked once the function computes the hash.

The callback function is called with two arguments: err and derivedKey. err is an exception object when key derivation fails, otherwise err is null. derivedKey is passed to the callback as a Buffer.

NOTE: Having to be constrained by scrypt with its callback, because we want to store the hash with the rest of the user's data. The rest of the user generation code would need to go inside of this callback, and this is not ideal. To solve this, rather than using the default scrypt function, we can use a promisified version of it. In that way, we can safly use the async/await syntax and have the hash stored into a variable when the promise is resolved.

HOW? Promisify function, from from the utilities module of the node.js standard library.

>> Implementing changes to user authentication

This will be accomplished by creating a helper function to compare passwords in the UserRepository class. It wil receive two arguments: the password provided in the sign in form and the password string that will be stored for the user with the given email in the data store.

How are we going to do the comparison process?
  - split the password in the data store at the separator and get two substrings, that will represent the hashed 'password + salt' and the plain text salt respectively.
  - add the salt to the provided password and get a hashed version of the resulting string.
  - compare the substring that represents the hashed 'password + salt' obtained in step 1 and the resulting hash obtained in step 2.
  - return the result of this comparison (true if the strings match, false if they don't).



