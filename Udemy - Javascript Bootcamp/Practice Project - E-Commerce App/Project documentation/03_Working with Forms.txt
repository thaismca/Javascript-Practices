>>>> UNDERSTANDING FORM SUBMISSION

When user clicks on a form a button, or hit enter while having a form input selected, a network request coming from the browser to the server is issued: automatic submission.

In an automatic submission, the browser is going to take a look at that form element. It's going to find all the different input elements inside of it, and the browser is going to attempt to collect all the information from each of those input elements that have a name property assigned to them. It then forms all that information into something called a query string.

And then the browser makes a request with a method of GET to the same URL that is currently looking at, passing that query string. If you check the URL after the automatic submission is made, you'll notice a question mark right after the base URL, and then all the information out of the form is right after that question mark.

NOTE: if the form input elements don't have a name property, this attempt of collecting information won't happen.

By default, when the browser takes this information and makes a request, it is a GET type request, but we can  modify that behavior and make a POST type request. A POST request is a type of HTTP request that is commonly associated with creating a record of some kind. This is done by adding a method attribute to the form, and making it's value of POST. 

Then, we could configure our express server to receive the information from the Admin Sign Up form, and take a look at the email, password and password confirmation properties and then use that information to create an account for this user.

NOTE: when a form submission with a method of GET is made, we see the form information inside the URL being passed as a query string. When the method is changed to POST, this no longer occurs. The information is no longer passed in the URL, it is instead appended onto something called request body.

--------------------------------------------------------------------------------------------------------------------

>>>> PARSING FORM DATA

At this point, the form data is being received by the server in the request body, since the request method was set to POST. We need to figure out how to get access to that Admin Sign Up form information and create a user with it.

Whenever a request is made from the browser to the server, there's not just one single exchange or package of information that get sent over. The request that is issued is broken up into several different little packets of information that are sent bit by bit from the browser to the server.

Here's a diagram that represents how that happens:

- Browser sends HTTP header to the server
- Server sees request with path and method
- Server runs appropriate callback method
- THEN the browser start transmitting information from request body
  --> browser sends a litte chunk of info, waits, for confirmation
    ---> browser sends a litte chunk of info, waits, for confirmation
      ----> browser sends a litte chunk of info, waits, for confirmation
- All chunks sent, request complete.

When the callback method is executed by the server, it still doesn't have access to the infomation contained in the request body. So we need to add code inside of that callback that essentially waits for all that additional information to come in before running any additional logic.

The request object emits a data event any time that it receives some bit of data. We can add code to listen for this data event, and then get access to the data that is being received. This data object comes in the form of a buffer, taht can be converted to a plain string using data.toString('utf8'). Thay means take all the information in the buffer, turn it into a string that is encoded in the UTF-8 format. We end up getting a string representation of everything that was inside of the body request, that looks like query string that we see inside the URL for GET requests.

Now that we have that string, we can parse it to get the information that we really care about out of it.

--------------------------------------------------------------------------------------------------------------------

>>>> WORKING WITH MIDDLEWARES

As per the last implementation, the implemented logic parses all the information that is included inside of a POST request. Eveything is being done inside of the route handler, but there's a caveat in this implementaton.

Request POST to '/' ----> Route Handler takes care of: 1. Form parsing logic, 2. Account creation

As we start to think about long term of developing this application, it's posible to immediatly identify a problem with this approach. At some point in time, this application will have a feature to create products, that will also involve some kind of form submission.

Request POST to '/products' ----> Route Handler takes care of: 1. Form parsing logic, 2. Product creation

The code would end up having duplicate logic between thse two route handlers. To solve this, we can extract that parsing logic into some separate function, that will run before either of the two route handlers. So it would look something like this:

Request POST to '/' ----------> |                    |--> Route Handler takes care of account creation
                                | Form parsing logic |
Request POST to '/products' --> |                    |--> Route Handler takes care of product creation

This means that any time the web server gets a POST request to '/' or '/products', we would want to run the form parsing logic and receive all the information at the body of the request before this information is handed to the final route handler that contains the specific logic to create either an account or a product.

Next step will be refactoring the code to put all this parsing logic into a separate helper function. This separate helper function that is going to process an incoming request is what we refer to inside of Express as middleware function. Check the '02_Web server' document for more details about middlewares in Express.

After putting a middleware function to parse the data from the body of an incoming POST request together, we can use it by putting it right in front of the callback function of the route handler: 
 - app.post('/', parsingMiddlewareFunction, (req, res) => {...});

This means that whenever we get a POST request to '/', run the parsinMiddlewareFunction. And once the middlewareFunction calls its next callback, take the req and res objects and pass them through to the next function (which is our route handler in this case).

The first implementation of this middleware function to parse the data from the body of an incoming POST request will be manually written, just for the sake of understand what's going on behind the scenes. Note that this won't be an appropriated approach for production use, for it doesn't account for a bunch of corner cases. The code will be later refactored to make use of outside libraries. 

--
--> Refactoring...
This middleware can be refactored to use an outside library, that would work more effectively and cover corner cases that the first implementation doesn't account for. The body-parser is a Node.js body parsing middleware, that parses incoming request bodies in a middleware before your handlers, available under the req.body property. It already comes with the installation of Express, so no need to install it separatelly. Just need to require it inside of our code to start making use of its methods.

const bodyParser = require('body-parser');

The bodyParser object exposes various factories to create middlewares. All middlewares will populate the req.body property with the parsed body when the Content-Type request header matches the type option, or an empty object ({}) if there was no body to parse, the Content-Type was not matched, or an error occurred.

In this case, we are going to use the method urlencoded, that returns a middleware that only parses urlencoded bodies and only looks at requests where the Content-Type header matches the type option. This is for handling specifically information that is coming out of an HTML form.

The urlencoded function takes an optional options object. We are going to pass it setting the 'extended' key to true. The "extended" syntax allows for rich objects and arrays to be encoded into the URL-encoded format, allowing for a JSON-like experience with URL-encoded.

--------------------------------------------------------------------------------------------------------------------

>>>> FORM VALIDATION

Normal behaviour for a form validation would be displaying the error message right away in the same form. Currently, this is not how our application is working. Whenever we fail to enter valid data into a form, the error message is being displayed in a separate HTML document. In order to try and submit the form again, the user would have to click the back button in the browser, and, once they do it, they lose that validation message.

We want to fix this behaviour for both sign in and sign up forms, and also implement it for all forms on the future, which means that we will need to figure out some repeatable solution that can be used multiple times inside of this project to handle validation on all the different forms that are created.

We can use a library to assist with hadling validation inside of this project: express-validator.
express-validator is a set of express.js middlewares that wraps validator.js validator and sanitizer functions.
Documentation: https://express-validator.github.io/docs/index.html

The idea behind the express-validator library is that we're going to pass in an array as the second argument of the request handlers inside of this application. Inside this array, we're going to tell express-validator to automatically do some validation on the different inputs that are being provided to that route handler from the browser, using check method.

If there's any validation error with any of the inputs, we can capture it by calling the validationResults method from express-validator inside of the request handler itself. This method finds the validation errors in the request and wraps them in an object with handy functions.

>> VALIDATION VS SANITIZATION

Validation checks if the input meets a set of criteria (such as a string contains no standalone single quotation marks). Sanitization modifies the input to ensure that it is valid (such as doubling single quotes).

>> VALIDATION CHAIN API AND SANITIZATION CHAIN API

All validators and sanitizers listed by validator.js are made available within a Validation Chain and Sanitization Chain, and are called "standard validators" and "standard sanitizers" in express-validator. Here's a list of validators and sanitizers currenlty available: https://github.com/validatorjs/validator.js#validators

You can add as many validators and sanitizers to a chain as you need. When the middleware runs, it will run each validator or sanitizer in the order they were specified; this means if a sanitizer is specified before a validator, the validator will run with the sanitized value.

>> DISPLAYING ERROR MESSAGES

To display error messagens in the form, we are going to work with the errors returned from a request. We can extract the validation errors from a request and make them available in a Result object by using validationResult method from the express-validator library. This Result object holds the current state of validation errors in a request and allows access to it in a variety of ways.

After trying to capture the potential errors in a variable, we can first check if any errors were returned by calling the isEmpty method, that a boolean indicating whether this result object contains no errors at all.

If there are errors in that Result object, we can get the first validation error of each failed field in the form of an object by calling the mapped method, which returns an object where the keys are the field names, and the values are the validation errors.

In our code, we are going to do the following:
- capture potential validation errors in a variable -> errors = validationResults(req)
- check if errors contains no errors at all -> errors.isEmpty()
if not, then we don't need to worry about displaying any messages
if there are errors, show the message

How to show the proper messages?
- create a helper function that receives the 'errors' Result object and a given 'property' name to check;
- use the mapped method to get an object from the 'errors' Result object, where the keys are the field names, and the values are the validation errors;
- for the key that matches the 'property' argument, check the value for the 'message' and return it.

NOTE: that would be two potential cases of errors in the steps above: either the 'errors' Result object is undefined, or there are no key that matches the 'property' argument in the object returned from errors.mapped. In any of these cases that would be an error message to be displayed.

--
--> Refactoring...
This validation is being repeated many times throughout the project (sign in, sign up and create new product forms so far). This means it can be encapsulated and become a reusable function. This will be implemented as a custom reusable middleware function, that's is going to check if any error occured when the validators ran. If any error occured, the appropriate template will be automatically sent back, with all the errors being fed to that template as well.

This middleware function will contain all the code that is currently being repeated in all the different route handlers. This middleware function will be called right after the validators, before the request handler is actually ran. Since the only difference between the code blocks that are being repeated is the template that is used to send back to the user, this middleware function will receive in its arguments a reference to the template function that is supposed to be used to render the proper template each time depending on the request that is being made. 

Remember: when authoring a middleware function, we get it called with our request, response and a refence to a function to say to express that we are done with the computation that is supposed to be done inside of the middleware function and that it can continue to process the request (next).

--------------------------------------------------------------------------------------------------------------------

>>>> WORKING WITH FILE UPLOAD IN FORMS

In the form to create new products, we are going to have one input where we can select a file to inlcude with the form - in this case, an input to upload a product image. We want to have some code that takes the image that was uploaded and save it somewhere.

If we try to access the image in the same way that we currently access other properties contaned inside of a form, which means checking the body of the POST request, all we are going to see is the name of the file, which is not useful at all. Clearly this default behaviour of the form submitted with a method of POST is not doing what we want.

>> ENCTYPE ATTRIBUTE

The enctype is a form attribute that stands for encoding type. Whereas the method attribute describes how to transmit information (GET or POST), enctype describes how to take information out of the form and get it ready to be transmitted. In other words, ot describes how to bundle all the information up to make it safe to transport in some style.

The default value for enctype is the one we've been using so far: "application/x-www-form-urlencoded". This means take all the information out of the inputs in the form, take a look at the name property and the respective value of each input, and put them altogether in a query string kind of format, making it safe for transport inside of an url. The problem of using this default enctype when we have an input that receives an uploaded file is that a file might have some data inside of it that cannot be safely or even efficiently transmitted into a url encoded format, because it cannot be simply turned into a string in any fashion.

So, in order to make it possible to work with an image that the user uploads in the form, we are going to use a different encoding type, one that can safely transmit raw file data.

>> MULTI-PART FORMS

The encoding type we are going to use: "multipart/form-data".
This means take all the different pieces of information out of the form and, for each separate input, send each little part to the back end server one by one.

NOTE: currently our bodyParser middleware is only parsing the body of POST requests that are urlencoded, and it's not going to work for multipart forms. Since the body-parser library does not handle multipart bodies, we are going to need to use another library for that.

>> MULTER

Multer is a node.js middleware for handling multipart/form-data, which is primarily used for uploading files.
Documentation: https://www.npmjs.com/package/multer

First install package -> npm install multer.

At the POST request handler that is going to handle this form submission that contains the actual file upload, call as a middleware the method upload.single(), passing as argument the name attribute of the input that receives the file upload.

Multer adds a body object and a file or files object to the request object. The body object (req.body) contains the values of the text fields of the form, the file or files object (req.file, req.files) contains the files uploaded via the form.


