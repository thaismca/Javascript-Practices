>>>> UNDERSTANDING FORM SUBMISSION

When user clicks on a form a button, or hit enter while having a form input selected, a network request coming from the browser to the server is issued: automatic submission.

In an automatic submission, the browser is going to take a look at that form element. It's going to find all the different input elements inside of it, and the browser is going to attempt to collect all the information from each of those input elements that have a name property assigned to them. It then forms all that information into something called a query string.

And then the browser makes a request with a method of GET to the same URL that is currently looking at, passing that query string. If you check the URL after the automatic submission is made, you'll notice a question mark right after the base URL, and then all the information out of the form is right after that question mark.

NOTE: if the form input elements don't have a name property, this attempt of collecting information won't happen.

By default, when the browser takes this information and makes a request, it is a GET type request, but we can  modify that behavior and make a POST type request. A POST request is a type of HTTP request that is commonly associated with creating a record of some kind. This is done by adding a method attribute to the form, and making it's value of POST. 

Then, we could configure our express server to receive the information from the Admin Sign Up form, and take a look at the email, password and password confirmation properties and then use that information to create an account for this user.

NOTE: when a form submission with a method of GET is made, we see the form information inside the URL being passed as a query string. When the method is changed to POST, this no longer occurs. The information is no longer passed in the URL, it is instead appended onto something called request body.

--------------------------------------------------------------------------------------------------------------------

>>>> PARSING FORM DATA

At this point, the form data is being received by the server in the request body, since the request method was set to POST. We need to figure out how to get access to that Admin Sign Up form information and create a user with it.

Whenever a request is made from the browser to the server, there's not just one single exchange or package of information that get sent over. The request that is issued is broken up into several different little packets of information that are sent bit by bit from the browser to the server.

Here's a diagram that represents how that happens:

- Browser sends HTTP header to the server
- Server sees request with path and method
- Server runs appropriate callback method
- THEN the browser start transmitting information from request body
  --> browser sends a litte chunk of info, waits, for confirmation
    ---> browser sends a litte chunk of info, waits, for confirmation
      ----> browser sends a litte chunk of info, waits, for confirmation
- All chunks sent, request complete.

When the callback method is executed by the server, it still doesn't have access to the infomation contained in the request body. So we need to add code inside of that callback that essentially waits for all that additional information to come in before running any additional logic.

The request object emits a data event any time that it receives some bit of data. We can add code to listen for this data event, and then get access to the data that is being received. This data object comes in the form of a buffer, taht can be converted to a plain string using data.toString('utf8'). Thay means take all the information in the buffer, turn it into a string that is encoded in the UTF-8 format. We end up getting a string representation of everything that was inside of the body request, that looks like query string that we see inside the URL for GET requests.

Now that we have that string, we can parse it to get the information that we really care about out of it.

--------------------------------------------------------------------------------------------------------------------

>>>> WORKING WITH MIDDLEWARES

As per the last implementation, the implemented logic parses all the information that is included inside of a POST request. Eveything is being done inside of the route handler, but there's a caveat in this implementaton.

Request POST to '/' ----> Route Handler takes care of: 1. Form parsing logic, 2. Account creation

As we start to think about long term of developing this application, it's posible to immediatly identify a problem with this approach. At some point in time, this application will have a feature to create products, that will also involve some kind of form submission.

Request POST to '/products' ----> Route Handler takes care of: 1. Form parsing logic, 2. Product creation

The code would end up having duplicate logic between thse two route handlers. To solve this, we can extract that parsing logic into some separate function, that will run before either of the two route handlers. So it would look something like this:

Request POST to '/' ----------> |                    |--> Route Handler takes care of account creation
                                | Form parsing logic |
Request POST to '/products' --> |                    |--> Route Handler takes care of product creation

This means that any time the web server gets a POST request to '/' or '/products', we would want to run the form parsing logic and receive all the information at the body of the request before this information is handed to the final route handler that contains the specific logic to create either an account or a product.

Next step will be refactoring the code to put all this parsing logic into a separate helper function. This separate helper function that is going to process an incoming request is what we refer to inside of Express as middleware function. Check the '02_Web server' document for more details about middlewares in Express.

After putting a middleware function to parse the data from the body of an incoming POST request together, we can use it by putting it right in front of the callback function of the route handler: 
 - app.post('/', parsingMiddlewareFunction, (req, res) => {...});

This means that whenever we get a POST request to '/', run the parsinMiddlewareFunction. And once the middlewareFunction calls its next callback, take the req and res objects and pass them through to the next function (which is our route handler in this case).

The first implementation of this middleware function to parse the data from the body of an incoming POST request will be manually written, just for the sake of understand what's going on behind the scenes. Note that this won't be an appropriated approach for production use, for it doesn't account for a bunch of corner cases. The code will be later refactored to make use of outside libraries. 


