This document contains more details about the web server created for the "Practice Project - E-Commerce App"
---------------------------------------------------------------------------------------------------------------
>>>>> EXPRESS
A minimal and flexible Node.js web application framework that provides a robust set of features for web and mobile applications.

Documentation: https://expressjs.com/
---------------------------------------------------------------------------------------------------------------

* Getting started
  - install package: npm install express
  - get access to the express package inside of the project: const express = require('express');
  - instantiate an object that describes all the different thing that the web server can do: const app = express();

We are going to customize this object to tell the web server what kind of requests it should expect to receive, and what it should do whenever it does receive a request.

---------------------------------------------------------------------------------------------------------------

* Basic routing
Routing refers to determining how an application responds to a client request to a particular endpoint, which is a URI (or path) and a specific HTTP request method (GET, POST, and so on). Each route can have one or more handler functions, which are executed when the route is matched.

Route definition takes the following structure: app.METHOD(PATH, HANDLER)
  - app is an instance of express
  - METHOD is an HTTP request method, in lowercase
  - PATH is a path on the server
  - HANDLER is the function executed when the route is matched

The HANDLER is a callback function that's always called with the two same arguments: req and res.
  - req: object that represents the incoming request from a browser into the web server
  - res: object that represents the outgoing response from the server back to the browser

---------------------------------------------------------------------------------------------------------------

* Accessing app from a browser
In order to have the app being accessed from a browser, it's necessary to tell the application to start listening for incoming network traffic on a particular port.

app.listen(path, [callback]): Starts a UNIX socket and listens for connections on the given path.

In our case, path will be the port 3000. Once both a basic routing and this listener are set up, navigate to 'localhost:3000' in the browser to access the app from there.

---------------------------------------------------------------------------------------------------------------

* Writing and using middleware
Express is a routing and middleware web framework that has minimal functionality of its own: An Express application is essentially a series of middleware function calls.

Middleware functions are functions that have access to the request object (req), the response object (res), and the next function in the applicationâ€™s request-response cycle. The next function is a function in the Express router which, when invoked, executes the middleware succeeding the current middleware.

Middleware functions can perform the following tasks:
 - Execute any code.
 - Make changes to the request and the response objects.
 - End the request-response cycle.
 - Call the next middleware in the stack.

The middleware function is always called with three arguments:
 - req: request object
 - res: response object
 - next: callback argument to the middleware function

Inside of the middleware function, we can run some amout of code to inspect and modify the req and res objects. If we do so, those modifications are going to show up inside of our later request handler that receives the same req and res objects when next is executed. After all processing of req and res is done by the middleware function, we need to  call the next function, which is essentially the sign that the middleware is all done processing, and that Express can continue and run whatever function needs to be ran.

It's possible to set a given middleware to be called for all the different route handlers.
 - app.use(middlewareFunction);

This eliminates the need of adding a call for that middleware function in every single request handler.

---------------------------------------------------------------------------------------------------------------

* Serving static files in Express
In some cases, we'll want our express application to serve up some files, making them available in our application to the browser. To serve static files such as images, CSS files, and JavaScript files, use the express.static built-in middleware function in Express. It receives a root argument, that represents the root directory from which to serve static assets.

This middleware can be wired up to be used in all the different route handlers inside of the projects, as the first one in the list, if there are multiple ones. By doing so, all requests that are currently being made to our application so far are going to be changed. They are all going to be handled first by this middleware. Express is going to take a look at the route of the incoming request, and it's going to see if there is a file inside of the public directory that matches up to the route that the request is looking for. If it finds the file, Express is going to serve up that file to whoever made the request. If the file is not found, Express is just going to continue on and run all the other middleware and route handlers that are wired up inside of the application.

To better organize the files that are going to be exposed to the outside world in our project, we are going to create a public directory and make sure that the browser con freely access all the different files and folders inside there.

NOTE: it's imperative that we never place any files inside there that are secret or really just important to our application. For instance, Javascript code that is intended to be used by the server must never be placed in the public directory. 