Practice Project- Movie Fight
https://www.udemy.com/course/javascript-beginners-complete-tutorial/learn/lecture/17003654#overview

Challenges:
1 - Fetch data about movies
Free API for getting movie data: omdbapi.com
We are going to have to do initially a search to find some records that match the user search term, and then a follow up request to get information about a particular movie that the user selected. This means we are going to use both available endpoints in the API.

By Search: to list movies in the autocomplete widget that matches whatever the user types in the search input.
By ID: to get more details about the movie that the user selects from th list of options in the autocomplete widget.

2 - Build autocomplete widget from scratch
- We are going to have an iput where user can type a string to search for a movie title.
- As soon as the user enters in some kind of full string and stops typing, we are going to take that search string and make a search request off to the API, and get back some list of results.
- Then, we are going to take all those search results, open up a little menu underneath that input and render out all the possible movies that the user might be looking for.
- Each item in the list will be comprised of the movie poster, movie title and movie year.
- If the search returns no result, the menu should be entirely closed.
- Since we are going to require the user to click on a movie in the list to select it, pressing enter when entrying data in the search input should do nothing.
- When an entry in the list of movies is selected by the user, the text in the search input should be updated to match the selected movie title, and the menu should be closed.
- If user clicks outside of the dropdown menu at any point, the menu should be closed and nothing else should happen.
 
------------------------------------------------------------------------------
Refactoring code
To make the autocomplete feature more reusable and beter organize the code, we are going to work with two different js files:

1 - app.js: non-reusable code for our very specific project
- root: element that the autocomplete should be rendered into
- fetchData(): function to search movies
- requestMovie(): function that makes a follow up request when a movie is clicked
- renderMovie(): function that knows how to render a movie

2 - autocomplete.js: super reusable code to get an autocomplete to work. 
- Zero knowledge about 'movies', so i can be used for different objects (like recipes, blog posts, etc.)
- Must be able to be ran several times in the same project.
- Function that will take the autocomplete config and render an autocomplete on the screen.

NOTE: currently we have a file with some helper functions (utils.js) and a messy code for making the autocomplete to work (app.js). This structure will no longer be applied.