This document contains notes about the Part 3 of the Automated Testing section of the Javascript Bootcamp course
----------------------------------------------------------------------------------------------------

>> OVERVIEW

In this Part 3 of the Automated Testing Section, we are going to build a testing framework from scratch: TestMe.

TestMe requirements:
- must be a node-based CLI framework
- must be able to test browser-based JS apps
- must require very little setup
- must be able to test a whole application, not just one little widget
- CLI must have a 'watch mode', so we don't have to keep restarting it over and over
- CLI must automatically find and run all files in our project that have a name of '.test.js

----------------------------------------------------------------------------------------------------

>> PROJECT SETUP
Implementing requirement: must be a node-based CLI framework

1. generate a new package.json file in the project root directory
- run 'npm init -y' in the cmd while in the project root directory

2. create an index.js file in the  project root directory
- this is going to be the essential entry point for the entire application

3. set up to project to run like a CLI tool
- add #!/usr/bin/env node to the top of the index.js file, #!/usr/bin/env node, to tell our computer we want to use Node to execute this file, as opposed to trying to execute this file directly
- set index.js to be executed from anywhere on our machine, by adding a command that runs the index.js file to a new bin section, in the package.json file
- run 'npm link' while in the project root directory

----------------------------------------------------------------------------------------------------

>> IMPLEMENTATION STEPS

1. File Collection
CLI must automatically find and run all files in our project that have a name of '.test.js. So, whenever we run our command line tool, we have to take a look at the project directory that the command line tool is being executed from and find all the different test files inside of this project directory.

2. Test Environment Setup
Once we have then collected all those different files, we have to do some environment setup before we run any tests. We need to make sure that we can somehow execute those files, and make sure that they have the ability to have some browser-based JavaScript code inside them.

3. Test File Execution
Once we do that environment set up, then actually execute each test file, running each little 'it' statement, one by one at a time, and watch for any errors that might occur.

4. Report Results
Once we've collected all the results from all these different tests, we need to tabulate all that data and print out the results to the terminal so that the developer who is using the tool understands what test failed and what test actually passed.

----------------------------------------------------------------------------------------------------

>> RUNNER.JS

This file is going to contain a bunch of code related to the entire process of:

- Find all files ending in '*.test.js' recursively through a folder
- Store a reference to each file we find
- After getting a full list of the test files, execute them one by one

Note: the actual test environment setup will be inside of a different file.

In order to organize our code, we are going to use a class to group together all this functionality, and then export that class so it can be available to other files inside of this project.

> constructor: will contain an instance variable that's going to store a reference to every file that we discover.

> collectFiles: method that implements a modified breadth first search to iterate recursively through a folder, find all files ending in '*.test.js', and store a reference to each file that is found. It taked an argumetn of targetPath, which going to be the entire absolute path to some folder that we want to investigate on our local machine.

Modified breadth search: normally, a breadth search would take all children from an element in a tree and add them to an array. Then start to iterate through the array, take a look at each individual item, and for each item find all of its children and add them all to the array. This process would continue until all elements of the tree were finally added to that array.

In this application, we're going to add these children into this array to iterate over only if they are folders. Files with .test.js extension are going to be added to the array that keeps track of all of the different test files (this.testFiles). And if it's not a test file or a folder, then we're basically just going to ignore it.

> runTests: method that iterates through the testFiles and execute them. It doesn't create a new and separate process from the current program that we are running. It actually executes all the code inside of the test files in the same context as our runner, which makes it a lot earsier to shaer information between the test file and the test runner.

--
>> Implementing 'beforeEach' and 'it'
In order to be able to actually run the '*.test.js' scripts, we still need to globally define the 'beforeEach' and 'it' methods. Similar to the Mocha framework, the it() function will be used to execute individual tests, and beforeEach() will be used to reset the environment before each call of the callback passed to the it() method. Both methods will be globally defined, which means that they will be available inside of every file and shared between every file as well.

Note: in Mocha, beforeEach() covers some corner cases that our implementation won't cover. In our case, beforeEach will be simply about getting all invokes for beforeEach() in a test script and run them all before executing the callback function that was passed to it().

Implementation:

> it(desc, func) : where desc is a string with a description for the test that is being executed, and func is the callback function that execute assertions.
> beforeEach(func) : where func is the callback function to be executed when it() is invoked, before actually running the callback that is passed to it().
----------------------------------------------------------------------------------------------------

>> RUNNING BRWOSER-BASED JS

One of the requirements of this TestMe application is to be able to test browser-based JS apps, even though we are running some code based on Node.js. The whole issue here is that with Node.js we do not have access to the browser, and that browser based app is going to try to access the DOM use methods that are built into the browser and so on. In order to solve this, we're going to run a little library inside of this testing tool that is going to simulate a browser inside of Node.js.

> JSDOM
Documentation: https://www.npmjs.com/package/jsdom

JSDOM is a pure-JavaScript implementation of many web standards, notably the WHATWG DOM and HTML Standards, for use with Node.js. In general, the goal of the project is to emulate enough of a subset of a web browser to be useful for testing and scraping real-world web applications.

There is no actual window that pops up and shows web pages or anything like that. Instead, it is a reimplementation of a lot of the code that runs in the browser. And so when we make use of JSDOM, we can pretend as though we have access to a browser, even though there is not actually a browser present.

fromFile() -> The fromFile function included with JSDOM is going to be called with a reference or the name of some HTML document that we want to load up when we call this function. Then JSDOM is going to look for a file on our hard drive that has that name, read the contents of that HTML file and try to load it up into this kind of virtual 
browser environment. Once JSDOM loads out that HTML document, it is also going to load up any associated JavaScript files as well. In other words, JSDOM is going to take in these two files and it's going to assemble a virtual representation of our application. That's going to give us back an object that we can use to kind of poke and prod at to make sure that our application is working the way we expect.

How this funtion will be used in our TestMe application? For every single test statement that is put together, we're going to call fromfile(). So for every test, we're going to load up a fresh version of our entire application that's going to give us back this object that represents the entire DOM. And we can call different methods on that thing to manipulate all the different elements inside there.
